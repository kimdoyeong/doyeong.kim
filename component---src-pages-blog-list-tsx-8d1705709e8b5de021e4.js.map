{"version":3,"sources":["webpack:///./src/components/MultiLanguage/index.tsx","webpack:///./src/lib/image/useImageBlog.ts","webpack:///./src/pages/blog/list.tsx","webpack:///./src/components/MultiLanguage/LanguageSelector.tsx","webpack:///./src/lib/useLang.ts"],"names":["MultiLanguage","ko","en","useSelector","state","Language","lang","useImageBlog","file","childImageSharp","fluid","Wrap","styled","div","props","image","PostWrap","css","tablet","mobile","Post","excerpt","slug","date","description","title","className","to","query","Page","data","useLang","console","log","ldata","edges","map","node","fields","frontmatter","src","prop","key","LanguageSelector","dispatch","useDispatch","toggle","useCallback","dispatchChangeLanguage","onClick","filter","Boolean","join"],"mappings":"00CAAA,qCAsBeA,IAbf,YAAuD,IAA9BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,GAGzB,OAFiBC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,YAAjDC,MAGJ,IAAK,KACD,OAAO,oCAAGL,GACd,IAAK,KACD,OAAO,oCAAGC,GACd,QACI,OAAO,oCAAGD,M,kDCAPM,IAhBf,WAaE,OAZa,OAYDC,KAAKC,gBAAgBC,Q,8NCJ7BC,EAAOC,IAAOC,IAAV,6DAAGD,CAAH,wiBAEgB,SAACE,GAAD,OAAWA,EAAMC,SAwCrCC,EAAWJ,IAAOC,IAAV,iEAAGD,CAAH,0TAWQ,SAAAE,GAAK,OAAIA,EAAMC,MAAQE,YAAd,uBAAwBH,EAAMC,OAAqBE,YAAnD,eAW7BC,YAAOD,YAAA,CAAD,gCAINE,YAAOF,YAAA,CAAD,yCAKR,SAASG,EAAT,GAAuE,IAAvDC,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,YAAaT,EAAqB,EAArBA,MAAOU,EAAc,EAAdA,MACvD,OACE,kBAACT,EAAD,CAAUD,MAAOA,GACf,kBAAC,OAAD,CAAMW,UAAU,KAAKC,GAAIL,GACvB,yBAAKI,UAAU,UACf,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SAASD,GACvB,uBAAGC,UAAU,QAAQH,GACrB,uBAAGG,UAAU,eAAeF,GAAeH,MA2C9C,IAAMO,EAAQ,aA4DNC,UAjGf,YAA6B,IAAbC,EAAa,EAAbA,KACRf,EAAQR,cACRD,EAAOyB,cAEbC,QAAQC,IAAIH,EAAKxB,IAEjB,IAAM4B,EAASJ,EAAKxB,GAAM6B,MAAgBC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MAAoB,CAChEhB,QAASgB,EAAKhB,QACdC,KAAMe,EAAKC,OAAOhB,KAClBC,KAAMc,EAAKE,YAAYhB,KACvBC,YAAaa,EAAKE,YAAYf,YAC9BT,MAAOsB,EAAKE,YAAYxB,OAASsB,EAAKE,YAAYxB,MAAMN,gBAAgBC,MAAM8B,IAC9Ef,MAAOY,EAAKE,YAAYd,UAG1B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,MAAM,WACX,kBAACd,EAAD,CAAMI,MAAOA,EAAMyB,KACjB,4BAAQd,UAAU,UAChB,yBAAKA,UAAU,mBACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SACZ,kBAAC,IAAD,CAAezB,GAAG,MAAMC,GAAG,YAIjC,6BAASwB,UAAU,WAChBQ,EAAME,KAAI,SAAAK,GAAI,OAAI,kBAACrB,EAAD,eAAMsB,IAAKD,EAAKnB,MAAUmB,Y,kCChIvD,6DAMM9B,EAAOC,IAAOC,IAAV,yEAAGD,CAAH,oVAuDK+B,IAvBf,WAA4B,IAChBrC,EAASH,aAAY,SAACC,GAAD,OAAsBA,EAAMC,YAAjDC,KACFsC,EAAWC,cAEXC,EAASC,uBAAY,WAEnBH,EADS,OAATtC,EACS0C,YAAuB,MAEvBA,YAAuB,SAErC,CAACJ,EAAUtC,IAEd,OACI,kBAACK,EAAD,KACI,yBAAKe,UAAU,SAAf,MACA,yBAAKA,UAAU,WAAWuB,QAASH,GAC/B,yBAAKpB,UAAW,CAAC,SAAmB,OAATpB,GAAiB,OAAiB,OAATA,GAAiB,SAAS4C,OAAOC,SAASC,KAAK,QAEvG,yBAAK1B,UAAU,SAAf,S,oCCxDZ,gBAMeK,IAJf,WACE,OAAO5B,aAAY,SAACC,GAAD,OAAsBA,EAAMC,SAASC","file":"component---src-pages-blog-list-tsx-8d1705709e8b5de021e4.js","sourcesContent":["import React from 'react'\n\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/reducer';\n\ninterface MultiLanguageProps {\n    ko: string,\n    en: string\n}\nfunction MultiLanguage({ ko, en }: MultiLanguageProps) {\n    const { lang } = useSelector((state: RootState) => state.Language);\n\n    switch (lang) {\n        case 'ko':\n            return <>{ko}</>;\n        case 'en':\n            return <>{en}</>;\n        default:\n            return <>{ko}</>;\n    }\n}\n\nexport default MultiLanguage;","import { useStaticQuery, graphql } from \"gatsby\"\n\nfunction useImageBlog() {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: { eq: \"page/blog.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 2309, grayscale: true) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return data.file.childImageSharp.fluid\n}\n\nexport default useImageBlog\n","import React from 'react'\nimport Layout from '../../components/Layout';\nimport styled, { css } from 'styled-components';\nimport useImageBlog from '../../lib/image/useImageBlog';\nimport LanguageSelector from '../../components/MultiLanguage/LanguageSelector';\nimport MultiLanguage from '../../components/MultiLanguage';\nimport { graphql, Link } from 'gatsby';\nimport useLang from '../../lib/useLang';\nimport { tablet, mobile } from '../../lib/style/media';\nimport SEO from '../../components/SEO';\n\nconst Wrap = styled.div<{ image: string }>`\n    .header {\n        background: url(${(props) => props.image}) no-repeat;\n        background-size: cover;\n        background-position: center bottom;\n        height: 60vh;\n        box-shadow: 0 5px 5px -1px rgba(0,0,0,0.5);\n        position: relative;\n        color: black;\n        & > .language-select {\n            position: absolute;\n            top: 1em;\n            right: 1em;\n        }\n        & > .contents {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            right: 0;\n\n            padding: 1.5em;\n            background: linear-gradient(\n                to bottom,\n                rgba(255,255,255,0),\n                rgba(255,255,255,60)\n            );\n            h1.title {\n                margin-top: 0;\n                font-size: 3.5em;\n                margin-bottom: 1rem;\n            }\n        }\n    }\n    .article {\n        max-width: 1280px;\n        margin: 0 auto;\n        margin-top: 20px;\n        padding: 1.5em;\n        display: flex;\n        flex-wrap: wrap;\n    }\n`;\nconst PostWrap = styled.div<{ image?: string }>`\nwidth: 300px;\nbackground: #333;\nborder-radius: 7px;\nbox-shadow: 2px 2px 5px -1px rgba(0,0,0,0.3);\nmargin: 1em;\n.go {\n    all: unset;\n    cursor: pointer;\n    .image {\n        height: 200px;\n        background: ${props => props.image ? css`url(${props.image}) no-repeat` : css`#EAEAEA`};\n        background-size: cover;\n        background-position: center;\n        border-top-left-radius: 7px;\n        border-top-right-radius: 7px;\n    }\n    .contents {\n        padding: .5em 1.5em;\n    }\n}\n\n${tablet(css`\n  width: 100%;\n  margin: 1em 3em;\n`)}\n${mobile(css`\n  margin: 1em 1.5em;\n  font-size: 0.8rem;\n`)}\n`;\nfunction Post({ excerpt, slug, date, description, image, title }: any) {\n  return (\n    <PostWrap image={image}>\n      <Link className=\"go\" to={slug}>\n        <div className=\"image\"></div>\n        <div className=\"contents\">\n          <h1 className=\"title\">{title}</h1>\n          <p className=\"date\">{date}</p>\n          <p className=\"description\">{description || excerpt}</p>\n        </div>\n      </Link>\n    </PostWrap>\n  );\n}\nfunction Page({ data }: any) {\n  const image = useImageBlog();\n  const lang = useLang();\n\n  console.log(data[lang]);\n\n  const ldata = (data[lang].edges as any[]).map(({ node }: any) => ({\n    excerpt: node.excerpt,\n    slug: node.fields.slug,\n    date: node.frontmatter.date,\n    description: node.frontmatter.description,\n    image: node.frontmatter.image && node.frontmatter.image.childImageSharp.fluid.src,\n    title: node.frontmatter.title\n  }));\n\n  return (\n    <Layout>\n      <SEO title=\"블로그 목록\" />\n      <Wrap image={image.src}>\n        <header className=\"header\">\n          <div className=\"language-select\">\n            <LanguageSelector />\n          </div>\n          <div className=\"contents\">\n            <h1 className=\"title\">\n              <MultiLanguage ko=\"블로그\" en=\"Blog\" />\n            </h1>\n          </div>\n        </header>\n        <article className=\"article\">\n          {ldata.map(prop => <Post key={prop.slug} {...prop} />)}\n        </article>\n      </Wrap>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n    query BlogListQuery {\n        ko: allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: {\n              frontmatter: { lang: { eq: \"ko\" } }\n              fields: { slug: { regex: \"/^/blog/\" } }\n            }\n          ) {\n            edges {\n              node {\n                excerpt\n                fields {\n                  slug\n                }\n                frontmatter {\n                  date(formatString: \"YYYY-MM-DD\")\n                  title\n                  description\n                  image {\n                    childImageSharp {\n                      fluid(maxWidth: 500) {\n                        ...GatsbyImageSharpFluid\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          en: allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: {\n              frontmatter: { lang: { eq: \"en\" } }\n              fields: { slug: { regex: \"/^/blog/\" } }\n            }\n          ) {\n            edges {\n              node {\n                excerpt\n                fields {\n                  slug\n                }\n                frontmatter {\n                  date(formatString: \"YYYY-MM-DD\")\n                  title\n                  description\n                  image {\n                    childImageSharp {\n                      fluid(maxWidth: 300) {\n                        ...GatsbyImageSharpFluid\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n`;\nexport default Page;","import React, { useCallback } from 'react'\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store/reducer';\nimport { dispatchChangeLanguage } from '../../store/reducer/Language';\n\nconst Wrap = styled.div`\n    display: flex;\n    .selector {\n        height: 28px;\n        width: 56px;\n        border-radius: 14px;\n        background: #7a7a7a;\n        position: relative;\n        display: flex;\n        align-items: center;\n        cursor: pointer;\n        .button {\n            width: 28px;\n            height: 28px;\n            background: #EAEAEA;\n            border-radius: 14px;\n            position: absolute;\n\n            transition: left .25s;\n            &.left {\n                left : 0px;\n            }\n            &.right {\n                left: 30px;\n            }\n        }\n    }\n    .label {\n        align-self: center;\n        margin: 0 6px;\n    }\n`;\nfunction LanguageSelector() {\n    const { lang } = useSelector((state: RootState) => state.Language);\n    const dispatch = useDispatch();\n\n    const toggle = useCallback(() => {\n        if (lang === 'ko') {\n            dispatch(dispatchChangeLanguage('en'));\n        } else {\n            dispatch(dispatchChangeLanguage('ko'));\n        }\n    }, [dispatch, lang]);\n\n    return (\n        <Wrap>\n            <div className=\"label\">KO</div>\n            <div className=\"selector\" onClick={toggle}>\n                <div className={[\"button\", lang === 'ko' && 'left', lang === 'en' && 'right'].filter(Boolean).join(' ')} />\n            </div>\n            <div className=\"label\">EN</div>\n        </Wrap>\n    )\n}\n\nexport default LanguageSelector;","import { useSelector } from \"react-redux\"\nimport { RootState } from \"../store/reducer\"\nfunction useLang() {\n  return useSelector((state: RootState) => state.Language.lang)\n}\n\nexport default useLang\n"],"sourceRoot":""}